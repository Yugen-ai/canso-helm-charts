{{- /*
Database Schema Migration Job. Runs Flyway migrations using a custom image. Triggered by Helm hooks before install and upgrade.
*/}}

{{- if .Values.dbSchemaSetup.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "database-foundation.fullname" . }}-db-migrate
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "database-foundation.labels" . | nindent 4 }}
    app.kubernetes.io/component: db-schema-migration
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    description: "Job to apply database schema migrations using Flyway"
spec:
  backoffLimit: {{ .Values.dbSchemaSetup.backoffLimit }}
  ttlSecondsAfterFinished: {{ .Values.dbSchemaSetup.ttlSecondsAfterFinished }}

  template:
    metadata:
      name: {{ include "database-foundation.fullname" . }}-db-migrate-pod
      labels:
        {{- include "database-foundation.labels" . | nindent 8 }}
        app.kubernetes.io/component: db-schema-migration
    spec:
      # Jobs should typically run once and not be restarted on failure by the kubelet
      restartPolicy: Never
      initContainers:
      - name: wait-for-db
        image: "postgres:{{ template "postgresql.imageTag" (dict "Values" .Values.postgresql) }}"
        imagePullPolicy: IfNotPresent
        # Command to repeatedly check if PostgreSQL is ready
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for PostgreSQL primary service '{{ printf "%s-postgresql" .Release.Name }}' to be ready..."
            until pg_isready -h {{ printf "%s-postgresql" .Release.Name }} -p 5432 -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} -t 5; do
              echo "PostgreSQL not ready yet, sleeping..."
              sleep 5
            done
            echo "PostgreSQL is ready! Proceeding with migrations."
        env:
          # PGPASSWORD is required by pg_isready when checking with username/database
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                # Name of the secret created by the Bitnami PostgreSQL chart
                # This usually follows the pattern '<RELEASE_NAME>-postgresql'
                name: {{ printf "%s-postgresql" .Release.Name }}
                # Key within the secret containing the PostgreSQL password
                # TODO - Check Bitnami official documentation for the correct key
                key: postgresql-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

      containers:
      - name: flyway-migrate
        image: "{{ .Values.dbSchemaSetup.image.repository }}:{{ .Values.dbSchemaSetup.image.tag }}"
        imagePullPolicy: {{ .Values.dbSchemaSetup.image.pullPolicy }}
        command: ["flyway"]
        args: ["migrate"]
        env:
          # --- Flyway Configuration via Environment Variables ---
          # JDBC URL for connecting to the PostgreSQL primary service
          # Format: jdbc:postgresql://<service-name>.<namespace>.svc.cluster.local:<port>/<database>
          - name: FLYWAY_URL
            value: "jdbc:postgresql://{{ printf "%s-postgresql" .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local:5432/{{ .Values.postgresql.auth.database }}"
          # Database username configured in the Bitnami subchart
          - name: FLYWAY_USER
            value: {{ .Values.postgresql.auth.username | quote }}
          # Database password retrieved from the secret managed by the Bitnami subchart
          - name: FLYWAY_PASSWORD
            valueFrom:
              secretKeyRef:
                # Name of the secret created by the Bitnami PostgreSQL chart
                name: {{ printf "%s-postgresql" .Release.Name }}
                # Key within the secret containing the PostgreSQL password
                # Ensure this matches the key used by the Bitnami chart (e.g., 'postgresql-password' or 'password')
                key: postgresql-password
          - name: FLYWAY_LOCATIONS
            value: {{ .Values.dbSchemaSetup.flyway.locations | quote }}
        resources:
          {{- toYaml .Values.dbSchemaSetup.resources | nindent 10 }}

{{- end }}
