{{- /*
DB Schema Migration Job. Runs Flyway migrations and Triggered by Helm hooks.
*/}}

{{- if .Values.dbSchemaSetup.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "canso-investigations-db.fullname" . }}-db-migrate
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "canso-investigations-db.labels" . | nindent 4 }}
    app.kubernetes.io/component: db-schema-migration
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  backoffLimit: {{ .Values.dbSchemaSetup.backoffLimit }}
  ttlSecondsAfterFinished: {{ .Values.dbSchemaSetup.ttlSecondsAfterFinished }}

  template:
    metadata:
      name: {{ include "canso-investigations-db.fullname" . }}-db-migrate-pod
      labels:
        {{- include "canso-investigations-db.labels" . | nindent 8 }}
        app.kubernetes.io/component: db-schema-migration
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: {{ .Values.dbSchemaSetup.imagePullSecrets | quote }}
      initContainers:
      - name: wait-for-db
        image: "postgres:16"
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c']
        args:
          - |
            sleep 5

            PG_HOST="{{ printf "%s-postgresql-primary" .Release.Name }}"
            PG_PORT="5432"
            PG_USER="{{ .Values.postgresql.auth.username }}"
            PG_DB="{{ .Values.postgresql.auth.database }}"

            echo "Waiting for PostgreSQL primary service '$PG_HOST' to be ready..."

            until pg_isready -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" -t 5; do
              echo "PostgreSQL not ready yet (Host: $PG_HOST, Port: $PG_PORT, User: $PG_USER, DB: $PG_DB), sleeping..."
              sleep 5
            done

            echo "PostgreSQL is ready! Proceeding with migrations."
        env:
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                # Name of the secret created by the Bitnami PostgreSQL chart
                # This usually follows the pattern '<RELEASE_NAME>-postgresql'
                name: {{ printf "%s-postgresql" .Release.Name }}
                # Key within the secret containing the PostgreSQL password
                key: password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

      containers:
      - name: flyway-migrate
        image: "{{ .Values.dbSchemaSetup.image.repository }}:{{ .Values.dbSchemaSetup.image.tag }}"
        imagePullPolicy: {{ .Values.dbSchemaSetup.image.pullPolicy }}
        command: ["flyway"]
        args:
          - "-X"
          - "migrate"
        env:
          # JDBC URL for connecting to the PostgreSQL primary service
          # Format: jdbc:postgresql://<service-name>.<namespace>.svc.cluster.local:<port>/<database>
          - name: FLYWAY_URL
            value: "{{ include "postgresql.jdbcUrl" . }}"
          # Database username configured in the Bitnami subchart
          - name: FLYWAY_USER
            value: {{ .Values.postgresql.auth.username | quote }}
          # Database password retrieved from the secret managed by the Bitnami subchart
          - name: FLYWAY_PASSWORD
            valueFrom:
              secretKeyRef:
                # Name of the secret created by the Bitnami PostgreSQL chart
                name: {{ printf "%s-postgresql" .Release.Name }}
                # Key within the secret containing the PostgreSQL password
                key: password
          - name: FLYWAY_LOCATIONS
            value: {{ .Values.dbSchemaSetup.flyway.locations | quote }}
          - name: FLYWAY_SCHEMAS
            value: {{ .Values.dbSchemaSetup.flyway.schemas | quote }}
        resources:
          {{- toYaml .Values.dbSchemaSetup.resources | nindent 10 }}

{{- end }}
