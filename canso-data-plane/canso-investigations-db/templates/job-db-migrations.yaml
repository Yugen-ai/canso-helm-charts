{{- /*
DB Schema Migration Job. Runs Flyway migrations and Triggered by Helm hooks.
*/}}

{{- if .Values.dbSchemaSetup.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "canso-investigations-db.fullname" . }}-db-migrate
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "canso-investigations-db.labels" . | nindent 4 }}
    app.kubernetes.io/component: db-schema-migration
spec:
  backoffLimit: {{ .Values.dbSchemaSetup.backoffLimit }}
  ttlSecondsAfterFinished: {{ .Values.dbSchemaSetup.ttlSecondsAfterFinished }}

  template:
    metadata:
      name: {{ include "canso-investigations-db.fullname" . }}-db-migrate-pod
      labels:
        {{- include "canso-investigations-db.labels" . | nindent 8 }}
        app.kubernetes.io/component: db-schema-migration
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: {{ .Values.dbSchemaSetup.imagePullSecrets | quote }}
      initContainers:
      - name: wait-for-db
        image: "postgres:16"
        imagePullPolicy: IfNotPresent
        env:
          {{- range $key, $value := .Values.env.postgresInit }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
        command: ['sh', '-c']
        args:
          - |
            # Initial delay to allow RBAC components (SA, Role, RoleBinding) to propagate
            sleep 5

            echo "Waiting for PostgreSQL primary service '$PG_HOST' to be ready..."

            until pg_isready -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" -t 5; do
              echo "PostgreSQL not ready yet (Host: $PG_HOST, Port: $PG_PORT, User: $PG_USER, DB: $PG_DB), sleeping..."
              sleep 5
            done

            echo "PostgreSQL is ready! Proceeding with migrations."
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

      containers:
      - name: flyway-migrate
        image: "{{ .Values.dbSchemaSetup.image.repository }}:{{ .Values.dbSchemaSetup.image.tag }}"
        imagePullPolicy: {{ .Values.dbSchemaSetup.image.pullPolicy }}
        command: ["flyway"]
        args:
          - "-X"
          - "migrate"
        env:
          {{- range $key, $value := .Values.env.flyway }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          - name: FLYWAY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.env.postgresInit.PG_SECRET_NAME }}
                key: {{ .Values.env.postgresInit.PG_SECRET_KEY }}
                namespace: {{ .Values.env.postgresInit.PG_NAMESPACE }}
        resources:
          {{- toYaml .Values.dbSchemaSetup.resources | nindent 10 }}
{{- end }}
