---
# Source: canso-rule-evaluation-service/templates/config-map-init.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: canso-rule-evaluation-service-redis-init-script
  namespace: rule-evaluation
data:
  redis-init.py: |
    import redis
    import json
    import time

    # Function to connect to Redis with retries
    def connect_to_redis_with_retries(host, port, retries=6, delay=10):
        for attempt in range(1, retries + 1):
            try:
                client = redis.Redis(host=host, port=port, socket_connect_timeout=5)
                client.ping()  
                return client
            except redis.ConnectionError as e:
                if attempt < retries:
                    time.sleep(delay)
        raise Exception('Failed to connect to Redis after multiple retries.')

    # Connect to Redis
    redis_host = "canso-rule-evaluation-service-redis"
    redis_port = 6379
    client = connect_to_redis_with_retries(host=redis_host, port=redis_port)

    # Extract rule IDs from rule entries
    rule_entries = {}
    rule_ids = [key.split('::')[1] for key in rule_entries.keys()]

    # Initialize the workflow key
    workflow_key = ""
    client.sadd(workflow_key, *rule_ids)

    # Initialize rule entries
    client.mset(rule_entries)
---
# Source: canso-rule-evaluation-service/templates/redis.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: canso-rule-evaluation-service-redis
  namespace: rule-evaluation
  labels:
    app: canso-rule-evaluation-service-redis
spec:
  type: NodePort
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app: canso-rule-evaluation-service-redis
---
# Source: canso-rule-evaluation-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: canso-rule-evaluation-service
  namespace: rule-evaluation
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
    prometheus.io/scheme: "http"
spec:
  type: NodePort
  selector:
    app: canso-rule-evaluation-service
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8000
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8000
---
# Source: canso-rule-evaluation-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: canso-rule-evaluation-service
  name: canso-rule-evaluation-service
  namespace: rule-evaluation
spec:
  replicas: 1
  selector:
    matchLabels:
      app: canso-rule-evaluation-service
  template:
    metadata:
      annotations:
        'consul.hashicorp.com/connect-inject': 'false'
      labels:
        app: canso-rule-evaluation-service
    spec:
      containers:
      - name: canso-rule-evaluation-service
        image: shaktimaanbot/rule-evaluation-service:v0.0.2-python-3.12-slim
        ports:
        - containerPort: 8000
        resources:
          limits:
            cpu: 400m
            memory: 500Mi
          requests:
            cpu: 50m
            memory: 100Mi
        env:
      imagePullSecrets:
        - name: docker-secret-cred
---
# Source: canso-rule-evaluation-service/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: canso-rule-evaluation-service-redis
  namespace: rule-evaluation
  labels:
    app: canso-rule-evaluation-service-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: canso-rule-evaluation-service-redis
  template:
    metadata:
      labels:
        app: canso-rule-evaluation-service-redis
    spec:
      containers:
        - name: redis
          image: "redis:7.4.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: canso-rule-evaluation-service/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: canso-rule-evaluation-service-ing
  namespace: rule-evaluation
  labels:
    app: canso-rule-evaluation-service
  annotations:
    nginx.org/mergeable-ingress-type: minion
    nginx.org/rewrites: serviceName=canso-rule-evaluation-service rewrite=/v1/risk
spec:
  ingressClassName: nginx
  rules:
    - host: "*.com"
      http:
        paths:
          - backend:
              service:
                name: canso-rule-evaluation-service
                port:
                  number: 80
            path: /canso-rule-evaluation-service/v1/risk
            pathType: Prefix
---
# Source: canso-rule-evaluation-service/templates/external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: canso-rule-evaluation-service-es
  namespace: rule-evaluation
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: secretstore-by-role
    kind: ClusterSecretStore
  target:
    name: docker-secret-cred 
    template:
      type: kubernetes.io/dockerconfigjson 
  data:
  - secretKey: .dockerconfigjson 
    remoteRef:
      key: canso-dockerhub-credentials 
      property: dockerhub
---
# Source: canso-rule-evaluation-service/templates/redis-init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: canso-rule-evaluation-service-redis-init
  namespace: rule-evaluation
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
    "argocd.argoproj.io/hook": Sync
    "argocd.argoproj.io/hook-delete-policy": BeforeHookCreation, HookSucceeded
    "argocd.argoproj.io/sync-wave": "1"
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: redis-init
          image: python:3.12-slim
          command: ["sh", "-c"]
          args:
            - |
              pip install redis &&
              python /scripts/redis-init.py
          volumeMounts:
            - name: redis-init-script
              mountPath: /scripts
          env:
      volumes:
        - name: redis-init-script
          configMap:
            name: canso-rule-evaluation-service-redis-init-script
