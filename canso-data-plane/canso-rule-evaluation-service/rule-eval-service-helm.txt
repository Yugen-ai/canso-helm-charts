This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-09T13:08:59.520Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
templates/
  _helpers.tpl
  config-map-init.yaml
  deployment.yaml
  external-secret.yaml
  ingress.yaml
  pvc.yaml
  redis-init-job.yaml
  redis.yaml
  service.yaml
Chart.yaml
template.txt
values.yaml

================================================================
Repository Files
================================================================

================
File: templates/_helpers.tpl
================
{{/*
Expand the name of the chart.
*/}}
{{- define "canso-rule-evaluation-service.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define "canso-rule-evaluation-service.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := default .Chart.Name .Values.nameOverride }}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "canso-rule-evaluation-service.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Common labels
*/}}
{{- define "canso-rule-evaluation-service.labels" -}}
helm.sh/chart: {{ include "canso-rule-evaluation-service.chart" . }}
{{ include "canso-rule-evaluation-service.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}

{{/*
Selector labels
*/}}
{{- define "canso-rule-evaluation-service.selectorLabels" -}}
app.kubernetes.io/name: {{ include "canso-rule-evaluation-service.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{/*
Create the name of the service account to use
*/}}
{{- define "canso-rule-evaluation-service.serviceAccountName" -}}
{{- if .Values.serviceAccount.create }}
{{- default (include "canso-rule-evaluation-service.fullname" .) .Values.serviceAccount.name }}
{{- else }}
{{- default "default" .Values.serviceAccount.name }}
{{- end }}
{{- end }}

{{/*
Create the image path for the passed in image field
Credits - https://blog.andyserver.com/2021/09/adding-image-digest-references-to-your-helm-charts/
*/}}
{{- define "canso-rule-evaluation-service.image" -}}
{{- $tag := .tag -}}
{{- if eq (substr 0 7 $tag) "sha256:" -}}
{{- printf "%s@%s" .repository $tag -}}
{{- else -}}
{{- printf "%s:%s" .repository $tag -}}
{{- end -}}
{{- end -}}

================
File: templates/config-map-init.yaml
================
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-redis-init-script
  namespace: {{ .Values.namespaceOverride }}
data:
  redis-init.py: |
    import redis
    import json
    import time

    # Function to connect to Redis with retries
    def connect_to_redis_with_retries(host, port, retries=6, delay=10):
        for attempt in range(1, retries + 1):
            try:
                client = redis.Redis(host=host, port=port, socket_connect_timeout=5)
                client.ping()  
                return client
            except redis.ConnectionError as e:
                if attempt < retries:
                    time.sleep(delay)
        raise Exception('Failed to connect to Redis after multiple retries.')

    # Connect to Redis
    redis_host = "{{ include "canso-rule-evaluation-service.name" . }}-redis"
    redis_port = 6379
    client = connect_to_redis_with_retries(host=redis_host, port=redis_port)

    # Extract rule IDs from rule entries
    rule_entries = {{ toJson .Values.redis.initJob.ruleEntries }}
    rule_ids = [key.split('::')[1] for key in rule_entries.keys()]

    # Initialize the workflow key
    workflow_key = "{{ .Values.redis.initJob.workflowKey }}"
    client.sadd(workflow_key, *rule_ids)

    # Initialize rule entries
    client.mset(rule_entries)

================
File: templates/deployment.yaml
================
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ include "canso-rule-evaluation-service.name" . }}
  name: {{ include "canso-rule-evaluation-service.name" . }}
  namespace: {{ .Values.namespaceOverride }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.deployment.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "canso-rule-evaluation-service.name" . }}
  template:
    metadata:
      annotations:
        'consul.hashicorp.com/connect-inject': 'false'
      labels:
        app: {{ include "canso-rule-evaluation-service.name" . }}
    spec:
      {{- if .Values.taint.enabled }}
      nodeSelector:
        {{- toYaml .Values.taint.nodeSelector | nindent 8 }}
      tolerations:
      - effect: {{ .Values.taint.tolerations.effect }}
        key: {{ .Values.taint.tolerations.key }}
        operator: {{ .Values.taint.tolerations.operator }}
        value: {{ .Values.taint.tolerations.value }}
      {{- end }}
      containers:
      - name: {{ include "canso-rule-evaluation-service.name" . }}
        image: {{ include "canso-rule-evaluation-service.image" (dict "repository" .Values.deployment.image.repository "tag" (default .Chart.AppVersion .Values.deployment.image.tag)) }}
        ports:
        - containerPort: {{ .Values.service.targetport }}
        resources:
          {{- toYaml .Values.deployment.resources | nindent 10 }}
        {{- if .Values.deployment.enableEnv }}
        env:
          {{- range .Values.deployment.env }}
          - name: {{ .name }}
            value: {{ .value | quote }}
          {{- end }}
        {{- end }}
        {{- if .Values.deployment.enableEnvSecrets }}
        envFrom:
          {{- range .Values.deployment.secrets }}
          - secretRef:
              name: {{ .name }}
          {{- end }}
        {{- end }}
        {{- if .Values.deployment.ImagePullSecrets.enabled }}
      imagePullSecrets:
        - name: {{ .Values.deployment.ImagePullSecrets.private_registry_secret }}
        {{- end }}

================
File: templates/external-secret.yaml
================
{{- if .Values.external_secret.enabled }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .Values.external_secret.name }}-es
  namespace: {{ .Values.namespaceOverride }}
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: {{ .Values.external_secret.cluster_secret_role }}
    kind: ClusterSecretStore
  target:
    name: {{ .Values.external_secret.target_secret_name }} 
    template:
      type: {{ .Values.external_secret.target_secret_type}} 
  data:
  - secretKey: {{ .Values.external_secret.target_secret_name_key }} 
    remoteRef:
      key: {{ .Values.external_secret.aws_secret_name }} 
      property: {{ .Values.external_secret.aws_secret_key }} 
{{- end }}

================
File: templates/ingress.yaml
================
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-ing
  namespace: {{ .Values.namespaceOverride }}
  labels:
    app: {{ include "canso-rule-evaluation-service.name" . }}
  annotations:
    {{- toYaml .Values.ingress.annotations | nindent 4 }}
spec:
  ingressClassName: {{ .Values.ingress.ingressClassName }}
  rules:
    - host: "{{  .Values.ingress.host }}"
      http:
        paths:
          - backend:
              service:
                name: {{ include "canso-rule-evaluation-service.name" . }}
                port:
                  number: 80
            path: {{ .Values.ingress.path }}
            pathType: {{ .Values.ingress.pathType }}
{{- end }}

================
File: templates/pvc.yaml
================
{{- if .Values.redis.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-redis-pvc
  namespace: {{ .Values.namespaceOverride }}
spec:
  accessModes:
    {{- toYaml .Values.redis.persistence.accessModes | nindent 4 }}
  resources:
    requests:
      storage: {{ .Values.redis.persistence.size }}
  storageClassName: {{ .Values.redis.persistence.storageClass }}
{{- end }}

================
File: templates/redis-init-job.yaml
================
{{- if .Values.redis.initJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-redis-init
  namespace: {{ .Values.namespaceOverride }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: redis-init
          image: python:3.12-slim
          command: ["sh", "-c"]
          args:
            - |
              pip install redis &&
              python /scripts/redis-init.py
          volumeMounts:
            - name: redis-init-script
              mountPath: /scripts
      volumes:
        - name: redis-init-script
          configMap:
            name: {{ include "canso-rule-evaluation-service.name" . }}-redis-init-script
      env:
        {{- if .Values.redis.auth.enabled }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "canso-rule-evaluation-service.name" . }}-redis
              key: redis-password
        {{- end }}
{{- end }}

================
File: templates/redis.yaml
================
{{- if .Values.redis.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-redis
  namespace: {{ .Values.namespaceOverride }}
  labels:
    app: {{ include "canso-rule-evaluation-service.name" . }}-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "canso-rule-evaluation-service.name" . }}-redis
  template:
    metadata:
      labels:
        app: {{ include "canso-rule-evaluation-service.name" . }}-redis
    spec:
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
            {{- if .Values.redis.auth.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "canso-rule-evaluation-service.name" . }}-redis
                  key: redis-password
            {{- end }}
          resources:
            {{- toYaml .Values.redis.resources | nindent 12 }}
---

{{- if .Values.redis.auth.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-redis
  namespace: {{ .Values.namespaceOverride }}
  labels:
    app: {{ include "canso-rule-evaluation-service.name" . }}-redis
type: Opaque
data:
  redis-password: {{ .Values.redis.auth.password | b64enc }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-redis
  namespace: {{ .Values.namespaceOverride }}
  labels:
    app: {{ include "canso-rule-evaluation-service.name" . }}-redis
spec:
  type: NodePort
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app: {{ include "canso-rule-evaluation-service.name" . }}-redis
{{- end }}

================
File: templates/service.yaml
================
apiVersion: v1
kind: Service
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}
  namespace: {{ .Values.namespaceOverride }}
spec:
  type: NodePort
  selector:
    app: {{ include "canso-rule-evaluation-service.name" . }}
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: {{ .Values.service.targetport }}
  - name: https
    port: 443
    protocol: TCP
    targetPort: {{ .Values.service.targetport }}

================
File: Chart.yaml
================
apiVersion: v2
name: canso-rule-evaluation-service
description: A Helm chart for Risk/Fraud Rule Evaluation Service.

# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.0.6

# This is the version number of the application being deployed. This version number should be
# incremented each time you make changes to the application. Versions are not expected to
# follow Semantic Versioning. They should reflect the version the application is using.
# It is recommended to use it with quotes.
appVersion: "v0.0.1-python-3.12-slim"

================
File: template.txt
================
---
# Source: canso-rule-evaluation-service/templates/config-map-init.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fraud-detection-v5-staging-redis-init-script
  namespace: fraud-detection
data:
  redis-init.py: |
    import redis
    import json
    import time

    # Function to connect to Redis with retries
    def connect_to_redis_with_retries(host, port, retries=6, delay=10):
        for attempt in range(1, retries + 1):
            try:
                client = redis.Redis(host=host, port=port, socket_connect_timeout=5)
                client.ping()  
                return client
            except redis.ConnectionError as e:
                if attempt < retries:
                    time.sleep(delay)
        raise Exception('Failed to connect to Redis after multiple retries.')

    # Connect to Redis
    redis_host = "fraud-detection-v5-staging-redis"
    redis_port = 6379
    client = connect_to_redis_with_retries(host=redis_host, port=redis_port)

    # Extract rule IDs from rule entries
    rule_entries = {"rule::high-value-transaction-v5":"{\"rule_name\": \"high-value-transaction-v5\", \"rule_definition\": {\"operator\": \"AND\", \"sub_rules\": [{\"field\": \"amount\", \"value\": 10000, \"operator\": \"\u003e\", \"storage_key\": null, \"storage_field\": null}]}, \"stage\": \"STAGING\", \"status\": \"ACTIVE\", \"created_at\": \"2024-12-20T10:20:08.916070+00:00\", \"updated_at\": \"2025-01-09T15:50:35.788516\"}","rule::low-balance-transaction-v5":"{\"rule_name\": \"low-balance-transaction-v5\", \"rule_definition\": {\"operator\": \"OR\", \"sub_rules\": [{\"field\": \"balance\", \"value\": 500, \"operator\": \"\u003c\", \"storage_key\": null, \"storage_field\": null}]}, \"stage\": \"STAGING\", \"status\": \"ACTIVE\", \"created_at\": \"2024-12-20T10:30:08.916070+00:00\", \"updated_at\": \"2025-01-09T15:55:35.788516\"}","rule::suspicious-login-v5":"{\"rule_name\": \"suspicious-login-v5\", \"rule_definition\": {\"operator\": \"AND\", \"sub_rules\": [{\"field\": \"ip\", \"value\": \"192.168.1.1\", \"operator\": \"==\", \"storage_key\": null, \"storage_field\": null}]}, \"stage\": \"STAGING\", \"status\": \"ACTIVE\", \"created_at\": \"2024-12-20T10:40:08.916070+00:00\", \"updated_at\": \"2025-01-09T16:00:35.788516\"}"}
    rule_ids = [key.split('::')[1] for key in rule_entries.keys()]

    # Initialize the workflow key
    workflow_key = "workflow::fraud-detection-v5::rules"
    client.sadd(workflow_key, *rule_ids)

    # Initialize rule entries
    client.mset(rule_entries)
---
# Source: canso-rule-evaluation-service/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fraud-detection-v5-staging-redis-pvc
  namespace: fraud-detection
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName:
---
# Source: canso-rule-evaluation-service/templates/redis.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: fraud-detection-v5-staging-redis
  namespace: fraud-detection
  labels:
    app: fraud-detection-v5-staging-redis
spec:
  type: NodePort
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app: fraud-detection-v5-staging-redis
---
# Source: canso-rule-evaluation-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fraud-detection-v5-staging
  namespace: fraud-detection
spec:
  type: NodePort
  selector:
    app: fraud-detection-v5-staging
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8000
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8000
---
# Source: canso-rule-evaluation-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: fraud-detection-v5-staging
  name: fraud-detection-v5-staging
  namespace: fraud-detection
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fraud-detection-v5-staging
  template:
    metadata:
      annotations:
        'consul.hashicorp.com/connect-inject': 'false'
      labels:
        app: fraud-detection-v5-staging
    spec:
      containers:
      - name: fraud-detection-v5-staging
        image: shaktimaanbot/rule-evaluation-service:v0.0.1-python-3.12-slim
        ports:
        - containerPort: 8000
        resources:
          limits:
            cpu: 400m
            memory: 500Mi
          requests:
            cpu: 50m
            memory: 100Mi
        env:
          - name: RULE_REGISTRY_HOST
            value: "fraud-detection-v5-staging-redis.fraud-detection.svc.cluster.local"
          - name: RULE_REGISTRY_PORT
            value: "6379"
          - name: RULE_REGISTRY_DB
            value: "0"
          - name: FEATURE_STORE_HOST
            value: "fraud-detection-v5-staging-redis.fraud-detection.svc.cluster.local"
          - name: FEATURE_STORE_PORT
            value: "6379"
          - name: FEATURE_STORE_DB
            value: "1"
      imagePullSecrets:
        - name: docker-secret-cred
---
# Source: canso-rule-evaluation-service/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-v5-staging-redis
  namespace: fraud-detection
  labels:
    app: fraud-detection-v5-staging-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fraud-detection-v5-staging-redis
  template:
    metadata:
      labels:
        app: fraud-detection-v5-staging-redis
    spec:
      containers:
        - name: redis
          image: "redis:7.4.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: canso-rule-evaluation-service/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fraud-detection-v5-staging-ing
  namespace: fraud-detection
  labels:
    app: fraud-detection-v5-staging
  annotations:
    nginx.org/mergeable-ingress-type: minion
spec:
  ingressClassName: nginx
  rules:
    - host: "*.com"
      http:
        paths:
          - backend:
              service:
                name: fraud-detection-v5-staging
                port:
                  number: 80
            path: /v1/risk
            pathType: Prefix
---
# Source: canso-rule-evaluation-service/templates/external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: canso-rule-evaluation-service-es
  namespace: fraud-detection
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: secretstore-by-role
    kind: ClusterSecretStore
  target:
    name: docker-secret-cred 
    template:
      type: kubernetes.io/dockerconfigjson 
  data:
  - secretKey: .dockerconfigjson 
    remoteRef:
      key: canso-dockerhub-credentials 
      property: dockerhub
---
# Source: canso-rule-evaluation-service/templates/redis-init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: fraud-detection-v5-staging-redis-init
  namespace: fraud-detection
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: redis-init
          image: python:3.12-slim
          command: ["sh", "-c"]
          args:
            - |
              pip install redis &&
              python /scripts/redis-init.py
          volumeMounts:
            - name: redis-init-script
              mountPath: /scripts
      volumes:
        - name: redis-init-script
          configMap:
            name: fraud-detection-v5-staging-redis-init-script
      env:

================
File: values.yaml
================
## @section spec
spec:
  ## @param spec.service_name Name of the service to be deployed
  service_name: &service_name "canso-rule-evaluation-service"

## @param nameOverride Override the name of the service
nameOverride: "canso-rule-evaluation-service"

## @param fullnameOverride Override the full name of the service
fullnameOverride: "canso-rule-evaluation-service"

# Override the deployment namespace.
## @section Override the deployment namespace
## @param namespaceOverride Override for the all helm components for deployment.
namespaceOverride: "rule-evaluation"

##############################################################################################
####    External Secrets Config
##############################################################################################

## @section External Secrets Config
external_secret:
  ## @param external_secret.enabled Enable the creation of the secret
  ##
  enabled: true
  ## @param external_secret.name The name of the secret that will be created
  ##
  name: *service_name
  ## @param external_secret.cluster_secret_role The name of the cluster secret role creted in the cluster
  ##
  cluster_secret_role: secretstore-by-role
  ## @param external_secret.target_secret_name The name of the secret that will be created
  ##
  target_secret_name: &image_pull_secret_name docker-secret-cred
  ## @param external_secret.target_secret_type The type of the secret that will be created
  ##
  target_secret_type: kubernetes.io/dockerconfigjson
  ## @param external_secret.target_secret_name_key The key within the secret in the external secrets store that holds the Docker configuration JSON.
  ##
  target_secret_name_key: .dockerconfigjson
  ## @param external_secret.aws_secret_name The path to the secret in AWS Secrets Manager that contains the Docker credentials
  ##
  aws_secret_name: canso-dockerhub-credentials
  ## @param external_secret.aws_secret_key The key within the secret in AWS Secrets Manager that contains the Docker credentials.
  ##
  aws_secret_key: dockerhub

##############################################################################################
####    Deployment 
##############################################################################################

## @section Deployment 
deployment:

  ## @subsection ImagePullSecrets
  ImagePullSecrets:
    ## @param deployment.ImagePullSecrets.enabled Enable the creation of the secret
    ##
    enabled: true
    ## @param deployment.ImagePullSecrets.private_registry_secret The name of the secret created by external secrets
    ##
    private_registry_secret: *image_pull_secret_name

  ## @param deployment.replicaCount Number of replicas to deploy
  replicaCount: 1

  ## @section deployment.image 
  image:
    ## @param deployment.image.repository The image repository
    repository: shaktimaanbot/rule-evaluation-service
    ## @param deployment.image.pullPolicy Image pull policy
    pullPolicy: IfNotPresent
    ## @param deployment.image.tag Overrides the image tag whose default is the chart appVersion.
    tag: ""

  ## @skip deployment.resources The resources requests and limits for the container.
  resources:
    limits:
      cpu: "400m"
      memory: "500Mi"
    requests:
      cpu: "50m"
      memory: "100Mi"
  ## @param deployment.enableEnv Enable the environment variables
  enableEnv: true

  ## @param deployment.env The environment variables
  env:  []
  
  ## @param deployment.enableEnvSecrets Enable the environment variables from secrets
  enableEnvSecrets: false

## @section autoscaling 
autoscaling:
  ## @param autoscaling.enabled enable autoscaling for the pods
  enabled: false

## @section taint 
taint:
  ## @param taint.enabled enabletaint for deployment pods
  enabled: false

##############################################################################################
####      Service COnfig
##############################################################################################

## @section Service
service:
  ## @param service.name The name of the service
  name: *service_name
  ## @param service.app The app name for service labels
  app: *service_name
  ## @param service.targetport The target port for the service
  targetport: 8000

##############################################################################################
####      Redis COnfig
##############################################################################################

## @section Redis
redis:
  ## @param redis.enabled Enable the redis
  enabled: true

  ## @section redis.initJob
  initJob:
    ## @param redis.initJob.enabled Enable the initialization job
    enabled: true  
    ## @param redis.initJob.workflowKey The workflow key
    workflowKey: ""
    ## @param redis.initJob.ruleEntries The rule entries
    ruleEntries: {}

  ## @section redis.persistence
  persistence:
    ## @param redis.persistence.enabled Enable persistence for redis instance
    enabled: true 
    ## @param redis.persistence.storageClass Specify the storage class or leave blank for default
    storageClass: ""  
    ## @param redis.persistence.size Size of the PersistentVolumeClaim
    size: 1Gi  
    ## @param redis.persistence.accessModes Define access modes
    accessModes:  
      - ReadWriteOnce


  ## @section redis.image 
  image:
    ## @param redis.image.repository The image repository
    repository: redis
    ## @param redis.image.tag Overrides the image tag whose default is the chart appVersion.
    tag: "7.4.2"
    ## @param redis.image.pullPolicy Image pull policy
    pullPolicy: IfNotPresent
  
  ## @section redis.auth 
  auth:
    ## @param redis.auth.enabled Enable the redis auth
    enabled: false
    ## @param redis.auth.password password of redis auth
    password: ""
  
  ## @skip redis.resources The resources requests and limits for the container.
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

##############################################################################################
###      Ingress Config
##############################################################################################

## @section Ingress
ingress:
  ## @param ingress.enabled Enable the ingress
  enabled: true
  ## @param ingress.host The host for the ingress
  host: '*.com'
  ## @param ingress.path The path for path based routing
  path: '/v1/risk'
  ## @param ingress.pathType The path type for the ingress
  pathType: Prefix
  ## @param ingress.ingressClassName The ingress class name 
  ingressClassName: nginx
  ## @skip ingress.annotations The annotations for the ingress
  annotations:
    nginx.org/mergeable-ingress-type: 'minion'
