apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "canso-rule-evaluation-service.name" . }}-redis-init-script
  namespace: {{ .Values.namespaceOverride }}
data:
  redis-init.py: |
    import redis
    import json
    import time

    # Function to connect to Redis with retries
    def connect_to_redis_with_retries(host, port, retries=6, delay=10):
        for attempt in range(1, retries + 1):
            try:
                client = redis.Redis(host=host, port=port, socket_connect_timeout=5)
                client.ping()  
                return client
            except redis.ConnectionError as e:
                if attempt < retries:
                    time.sleep(delay)
        raise Exception('Failed to connect to Redis after multiple retries.')

    # Connect to Redis
    redis_host = "{{ include "canso-rule-evaluation-service.name" . }}-redis"
    redis_port = 6379
    client = connect_to_redis_with_retries(host=redis_host, port=redis_port)

    # Extract rule IDs from rule entries
    rule_entries = {{ toJson .Values.redis.initJob.ruleEntries }}
    rule_ids = [key.split('::')[1] for key in rule_entries.keys()]

    # Initialize the workflow key
    workflow_key = "{{ .Values.redis.initJob.workflowKey }}"
    client.sadd(workflow_key, *rule_ids)

    # Initialize rule entries
    client.mset(rule_entries)
